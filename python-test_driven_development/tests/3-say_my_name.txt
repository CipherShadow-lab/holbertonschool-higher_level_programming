===========================
Doctests for say_my_name
===========================

>>> say_my_name = __import__('3-say_my_name').say_my_name

Basic examples from requirements
============================

Basic example with both names:
>>> say_my_name("John", "Smith")
My name is John Smith
>>> say_my_name("Walter", "White")
My name is Walter White

Only first name provided:
>>> say_my_name("Bob")
My name is Bob 

Invalid first name (not a string):
>>> try:
...     say_my_name(12, "White")
... except Exception as e:
...     print(e)
first_name must be a string

Invalid last name (not a string):
>>> say_my_name("Bob", 42)
Traceback (most recent call last):
TypeError: last_name must be a string

===========================
Additional Tests and Edge Cases
===========================

Empty first name (still valid):
>>> say_my_name("")
My name is  

Empty last name (default):
>>> say_my_name("Charlie")
My name is Charlie 

Empty last name (explicit):
>>> say_my_name("Dana", "")
My name is Dana 

First name with special characters:
>>> say_my_name("Élodie", "Brontë")
My name is Élodie Brontë

Names with leading/trailing whitespace:
>>> say_my_name("  Liam  ", "  Neeson ")
My name is   Liam    Neeson 

>>> say_my_name("Liam", None)
Traceback (most recent call last):
TypeError: last_name must be a string

>>> say_my_name(None, "Neeson")
Traceback (most recent call last):
TypeError: first_name must be a string
