===========================
Doctests for matrix_divided
===========================

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Basic example from main file
============================

Given this matrix:
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]

Dividing every element by 3:
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Matrix remains unchanged:
>>> matrix
[[1, 2, 3], [4, 5, 6]]

===========================
Tests and Edge Cases
===========================

Matrix with floats:
>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 2)
[[0.75, 1.25], [1.75, 2.25]]

Negative divisor:
>>> matrix_divided([[1, -2], [3, -4]], -2)
[[-0.5, 1.0], [-1.5, 2.0]]

Mismatched row sizes:
>>> matrix_divided([[1, 2], [3]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

Invalid element in matrix:
>>> matrix_divided([[1, "2"], [3, 4]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Non-list matrix input:
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Zero division:
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

Infinity divisor:
>>> matrix_divided([[1, 2], [3, 4]], float('inf'))
Traceback (most recent call last):
TypeError: div must be a number

NaN (Not a Number) divisor:
>>> matrix_divided([[1, 2], [3, 4]], float('nan'))
Traceback (most recent call last):
TypeError: div must be a number

Non-numeric div:
>>> matrix_divided([[1, 2], [3, 4]], "hello")
Traceback (most recent call last):
TypeError: div must be a number
